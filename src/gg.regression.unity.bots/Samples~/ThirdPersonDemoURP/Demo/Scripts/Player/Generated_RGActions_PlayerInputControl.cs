/// <auto-generated>
/// This file has been automatically generated. Do not modify.
/// </auto-generated>
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable RedundantAssignment
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Newtonsoft.Json;
using RegressionGames;
using RegressionGames.StateActionTypes;
using UnityEngine;

namespace RGThirdPersonDemo
{
    public class RGActions_PlayerInputControl : IRGActions
    {
        public static readonly Type BehaviourType = typeof(PlayerInputControl);
        public static readonly string EntityTypeName = "PlayerInputControl";
        public static readonly IDictionary<string, Delegate> ActionRequestDelegates = new ReadOnlyDictionary<string, Delegate>(new Dictionary<string, Delegate>()
        {{RGActionRequest_PlayerInputControl_MoveInDirection.ActionName, new Action<GameObject, RGActionRequest>(RGAction_PlayerInputControl_MoveInDirection.InvokeOnGameObject)}, });
    }

    public class RGActionRequest_PlayerInputControl_MoveInDirection : RGActionRequest
    {
        public RGActionRequest_PlayerInputControl_MoveInDirection(Vector2 newMoveDirection): base("MoveInDirection")
        {
            Input["newMoveDirection"] = newMoveDirection;
        }

        public static readonly string EntityTypeName = "PlayerInputControl";
        public static readonly string ActionName = "MoveInDirection";
        public Vector2 newMoveDirection => (Vector2)Input!["newMoveDirection"];
    }

    public class RGAction_PlayerInputControl_MoveInDirection : IRGAction
    {
        public static void InvokeOnGameObject(GameObject gameObject, RGActionRequest actionRequest)
        {
            // optimize this for local C# bots to avoid all the conversions/etc
            if (actionRequest is RGActionRequest_PlayerInputControl_MoveInDirection myActionRequest)
            {
                InvokeOnGameObject(gameObject, myActionRequest.newMoveDirection);
            }
            else
            {
                InvokeOnGameObject(gameObject, actionRequest.Input);
            }
        }

        private static void InvokeOnGameObject(GameObject gameObject, Dictionary<string, object> input)
        {
            Vector2 newMoveDirection = default;
            if (input.TryGetValue("newMoveDirection", out var newMoveDirectionInput))
            {
                try
                {
                    if (newMoveDirectionInput is Vector2)
                    {
                        newMoveDirection = (Vector2)newMoveDirectionInput;
                    }
                    else
                    {
                        newMoveDirection = RGSerialization_PlayerInputControl.Deserialize_Vector2(newMoveDirectionInput.ToString());
                    }
                }
                catch (Exception ex)
                {
                    RGDebug.LogError($"Failed to parse 'newMoveDirection' - {ex}");
                }
            }
            else
            {
                RGDebug.LogError("No parameter 'newMoveDirection' found");
                return;
            }

            InvokeOnGameObject(gameObject, newMoveDirection);
        }

        private static void InvokeOnGameObject(GameObject gameObject, params object[] args)
        {
            var monoBehaviour = gameObject.GetComponent<PlayerInputControl>();
            if (monoBehaviour == null)
            {
                //TODO (REG-1420): It would be nice if we could link them to the exact game object in the scene quickly.
                RGDebug.LogError($"Error: Regression Games internal error... Somehow RGAction: MoveInDirection got registered on a GameObject where MonoBehaviour: PlayerInputControl does not exist.");
                return;
            }

            monoBehaviour.MoveInput((Vector2)args[0]);
        }
    }

    public static class RGSerialization_PlayerInputControl
    {
        public static Vector2 Deserialize_Vector2(string paramJson)
        {
            return JsonConvert.DeserializeObject<Vector2>(paramJson);
        }
    }
}