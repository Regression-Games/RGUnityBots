/// <auto-generated>
/// This file has been automatically generated. Do not modify.
/// </auto-generated>
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Newtonsoft.Json;
using RegressionGames;
using RegressionGames.StateActionTypes;
using UnityEngine;

namespace RGThirdPersonDemo
{
    public class RGActions_PlayerAttack : IRGActions
    {
        public static readonly Type BehaviourType = typeof(PlayerAttack);
        public static readonly string EntityTypeName = "PlayerAttack";
        public static readonly IDictionary<string, Delegate> ActionRequestDelegates = new ReadOnlyDictionary<string, Delegate>(new Dictionary<string, Delegate>()
        {{RGActionRequest_PlayerAttack_SelectAndAttackEnemy.ActionName, new Action<GameObject, RGActionRequest>(RGAction_PlayerAttack_SelectAndAttackEnemy.InvokeOnGameObject)}, });
    }

    public class RGActionRequest_PlayerAttack_SelectAndAttackEnemy : RGActionRequest
    {
        public RGActionRequest_PlayerAttack_SelectAndAttackEnemy(int enemyId, int ability): base("SelectAndAttackEnemy")
        {
            Input["enemyId"] = enemyId;
            Input["ability"] = ability;
        }

        public static readonly string EntityTypeName = "PlayerAttack";
        public static readonly string ActionName = "SelectAndAttackEnemy";
        public int enemyId => (int)Input!["enemyId"];
        public int ability => (int)Input!["ability"];
    }

    public class RGAction_PlayerAttack_SelectAndAttackEnemy : IRGAction
    {
        public static void InvokeOnGameObject(GameObject gameObject, RGActionRequest actionRequest)
        {
            // optimize this for local C# bots to avoid all the conversions/etc
            if (actionRequest is RGActionRequest_PlayerAttack_SelectAndAttackEnemy myActionRequest)
            {
                InvokeOnGameObject(gameObject, myActionRequest.enemyId, myActionRequest.ability);
            }
            else
            {
                InvokeOnGameObject(gameObject, actionRequest.Input);
            }
        }

        private static void InvokeOnGameObject(GameObject gameObject, Dictionary<string, object> input)
        {
            int enemyId = default;
            if (input.TryGetValue("enemyId", out var enemyIdInput))
            {
                try
                {
                    int.TryParse(enemyIdInput.ToString(), out enemyId);
                }
                catch (Exception ex)
                {
                    RGDebug.LogError($"Failed to parse 'enemyId' - {ex}");
                }
            }
            else
            {
                RGDebug.LogError("No parameter 'enemyId' found");
                return;
            }

            int ability = default;
            if (input.TryGetValue("ability", out var abilityInput))
            {
                try
                {
                    int.TryParse(abilityInput.ToString(), out ability);
                }
                catch (Exception ex)
                {
                    RGDebug.LogError($"Failed to parse 'ability' - {ex}");
                }
            }
            else
            {
                RGDebug.LogError("No parameter 'ability' found");
                return;
            }

            InvokeOnGameObject(gameObject, enemyId, ability);
        }

        private static void InvokeOnGameObject(GameObject gameObject, params object[] args)
        {
            var monoBehaviour = gameObject.GetComponent<PlayerAttack>();
            if (monoBehaviour == null)
            {
                RGDebug.LogError($"Error: Regression Games internal error... Somehow RGAction: SelectAndAttackEnemy got registered on a GameObject where MonoBehaviour: PlayerAttack does not exist.", gameObject);
                return;
            }

            monoBehaviour.SelectAndAttackEnemy((int)args[0], (int)args[1]);
        }
    }

    public static class RGSerialization_PlayerAttack
    {
    }
}