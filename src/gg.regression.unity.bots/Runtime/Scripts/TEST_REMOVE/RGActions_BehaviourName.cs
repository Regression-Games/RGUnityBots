using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using RegressionGames.StateActionTypes;
using UnityEngine;

// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable ClassNeverInstantiated.Global
// ReSharper disable RedundantAssignment
/*
 * WARNING: This file is autogenerated and CANNOT be modified.
 * Any attempt to change this file will trigger it to be autogenerated again.
 */
namespace RegressionGames.TEST_REMOVE
{
    public class RGActions_BehaviourName : IRGActions
    {
        public static readonly Type BehaviourType = typeof(BehaviourName);

        // Called from BehavioursWithStateOrActions.cs
        public static readonly IDictionary<string, Delegate> ActionRequestDelegates = new ReadOnlyDictionary<string, Delegate>(
            new Dictionary<string, Delegate>()
            {
                {RGAction_BehaviourName_MoveInSpace.ActionName, new Action<GameObject, RGActionRequest>(RGAction_BehaviourName_MoveInSpace.InvokeOnGameObject)},
                {RGAction_BehaviourName_MoveInSpace.ActionName, new Action<GameObject, RGActionRequest>(RGAction_BehaviourName_MoveInSpace.InvokeOnGameObject)},
            }
        );
    }

    public class RGAction_BehaviourName_MoveInSpace: IRGAction
    {
        public static readonly string ActionName = "moveInSpace";

        public static void InvokeOnGameObject(GameObject gameObject, RGActionRequest actionRequest)
        {
            // optimize this for local C# bots to avoid all the conversions/etc
            if (actionRequest is RGActionRequest_BehaviourName_MoveInSpace myActionRequest)
            {
                InvokeOnGameObject(gameObject, myActionRequest.newOrientation);
            }
            else
            {
                InvokeOnGameObject(gameObject, actionRequest.Input);
            }
        }

        private static void InvokeOnGameObject(GameObject gameObject, Dictionary<string, object> input)
        {
            //TODO: Generate all this code from the old StartAction method

            Vector3? newOrientation = null;
            if (input.TryGetValue("newOrientation", out var newOrientationInput))
            {
                try
                {
                    if (newOrientationInput is Vector3 or null)
                    {
                        newOrientation = (Vector3?)newOrientationInput;
                    }
                    else
                    {
                        newOrientation = null;
                    }
                }
                catch (Exception ex)
                {
                    RGDebug.LogError($"Failed to parse 'newOrientationInput' - {ex}");
                }
            }
            else
            {
                RGDebug.LogError("No parameter 'newOrientationInput' found");
                return;
            }
            InvokeOnGameObject(gameObject, newOrientation);
        }

        private static void InvokeOnGameObject(GameObject gameObject, params object[] args)
        {
            var monoBehaviour = gameObject.GetComponent<BehaviourName>();
            if (monoBehaviour == null)
            {
                //TODO (REG-1420): It would be nice if we could link them to the exact game object in the scene quickly.
                RGDebug.LogError($"Error: Regression Games internal error... Somehow RGAction: {ActionName} got registered on a GameObject where MonoBehaviour: BehaviourName does not exist.");
                return;
            }
            monoBehaviour.MoveInSpace((Vector3?)args[0]);
        }

    }
    
    public class RGActionRequest_BehaviourName_MoveInSpace : RGActionRequest
    {
        public Vector3? newOrientation => (Vector3?)Input!["newOrientation"];
        
        public RGActionRequest_BehaviourName_MoveInSpace(Vector3? newOrientation) : base("moveInSpace")
        {
            Input["newOrientation"] = newOrientation;
        }

        public static readonly string EntityTypeName = "BehaviourNameTypeTest";
        public static readonly string ActionName = "moveInSpace";
    }
}
