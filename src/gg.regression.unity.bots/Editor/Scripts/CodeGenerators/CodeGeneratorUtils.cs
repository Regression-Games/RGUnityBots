using System.Linq;
using System.Text.RegularExpressions;
#if UNITY_EDITOR
using System;
using Codice.Client.Common.TreeGrouper;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using UnityEditor;
using UnityEngine;
#endif

namespace RegressionGames
{
#if UNITY_EDITOR
    public static class CodeGeneratorUtils
    {
        public static readonly string HeaderComment = "/// <auto-generated>" + Environment.NewLine +
                                                      "/// This file has been automatically generated. Do not modify." + Environment.NewLine +
                                                      "/// </auto-generated>" + Environment.NewLine + Environment.NewLine;

        public static string SanitizeActionName(string name)
        {
            return Regex.Replace(name.Replace(" ", "_"), "[^0-9a-zA-Z_]", "_");
        }

        /**
         * Returns a sanitized name to use as a namespace for generated code in this project
         */
        public static string GetNamespaceForProject()
        {
            return Regex.Replace("RG" + PlayerSettings.productName.Replace(" ", "_"), "[^0-9a-zA-Z_]", "_");
        }

        public static NameSyntax QualifiedNameFor(Type type) => SyntaxFactory.ParseName(type.FullName);

        public static AttributeSyntax Attribute(Type attributeType, params ExpressionSyntax[] arguments)
        {
            return SyntaxFactory.Attribute(
                QualifiedNameFor(attributeType),
                SyntaxFactory.AttributeArgumentList(
                    SyntaxFactory.SeparatedList(arguments.Select(SyntaxFactory.AttributeArgument))));
        }

        public static TypeOfExpressionSyntax TypeOf(Type t) => SyntaxFactory.TypeOfExpression(QualifiedNameFor(t));
        public static TypeOfExpressionSyntax TypeOf(string fullTypeName) => SyntaxFactory.TypeOfExpression(SyntaxFactory.ParseName(fullTypeName));
        public static ClassDeclarationSyntax PartialClass(string name) => SyntaxFactory.ClassDeclaration(name)
            .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PartialKeyword)));

        public static MemberDeclarationSyntax CreatePartialAttacherClass(
            string ns, string name, params string[] componentTypeNames)
        {
            var classDeclaration = PartialClass(name)
                .AddAttributeLists(SyntaxFactory.AttributeList(SyntaxFactory.SeparatedList(
                    componentTypeNames.Select(componentType =>
                        Attribute(typeof(RequireComponent), TypeOf(componentType))))));
            return string.IsNullOrEmpty(ns)
                ? classDeclaration
                : SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(ns)).AddMembers(classDeclaration);
        }
    }
#endif
}
