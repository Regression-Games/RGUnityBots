#!/bin/bash
#/ Usage: scripts/fmt [-u|--unity-path <path>] [--check] [--docker]
#/ Syncs Visual Studio/Rider solution and project files and then reformats the code using 'dotnet-format'.
#/
#/ Options:
#/   -u, --unity-path <path>   Path to the Unity installation to use. Defaults to an autodetected path based on the version of RGUnityBots.
#/      If --docker is specified, this is the version number of Unity to use.
#/  --check                    Checks if the code is formatted correctly, but does not modify it. For CI builds.
#/  --docker                   Use the dockerized version of Unity from game-ci.
source_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
repo_root="$(dirname "$source_dir")"
source "$repo_root/script/_utils.sh"

set -euo pipefail

# Parse arguments
check=false
sync_vs_args=()
relaunch_args=()
while [[ $# -gt 0 ]]; do
    key="$1"
    shift
    case "$key" in
        -u|--unity-path)
            sync_vs_args+=(--unity-path "$1")
            shift
            ;;
        --docker)
            docker=true
            ;;
        --check)
            check=true
            relaunch_args+=(--check)
            ;;
        --help)
            grep '^#/' "$0" | cut -c4-
            exit 0
            ;;
        -*)
            echo "Unknown option: $key"
            exit 1
            ;;
        *)
            echo "Unknown argument: $key"
            exit 1
            ;;
    esac
done

if ${docker:-false}; then
    if [ -z "${unity_path:-}" ]; then
        unity_path=$(get_unity_version "$repo_root/src/RGUnityBots")
    fi

    # We need to relaunch ourselves inside docker
    unity_docker "${unity_path:-}" "script/fmt" --unity-path "/opt/unity/Editor" ${relaunch_args[@]:-}

    # If we get here, we succeeded in docker and don't need to continue.
    exit 0
fi

if [ "$UNITY_DOCKER" = "1" ]; then
    # For now, we need to install and prep 'dotnet'
    # We can remove this if we want to create images with dotnet already installed
    curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --install-dir /usr/local/bin
fi

script/sync-vs ${sync_vs_args[@]:-}

echo "Finding all .csproj and .sln files..."
find . -name '*.csproj'
find . -name '*.sln'
echo "---"

dotnet tool restore

if $check; then
    echo "Validating code formatting..."
    if dotnet tool run dotnet-format -- --check "$repo_root/src/RGUnityBots/RGUnityBots.sln"; then
        echo "Formatting is good!"
    else
        echo "Formatting is bad!"
        exit 1
    fi
else
    echo "Reformatting code..."
    if dotnet tool run dotnet-format -- "$repo_root/src/RGUnityBots/RGUnityBots.sln"; then
        echo "Formatting is good!"
    else
        echo "Formatting is bad!"
        exit 1
    fi
fi